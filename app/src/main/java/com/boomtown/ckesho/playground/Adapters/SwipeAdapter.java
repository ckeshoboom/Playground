package com.boomtown.ckesho.playground.Adapters;

import android.content.Context;
import android.util.Log;
import android.view.HapticFeedbackConstants;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.boomtown.ckesho.playground.R;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * Created by ckesho on 10/16/2015.
 * Create custom adapters if you ever want to change or modify info inside the adapter
 */
public class SwipeAdapter extends ArrayAdapter<String> {

    List<String> items;
    Context context;
    int action_xinitial, action_xfinal, action_yinitial;
    boolean swipedRight,swipedLeft, alreadySwiped;
    //caches the various views within each row
    static class ViewHolder {
        //Resources being binded by Butterknife
        @Bind(R.id.ll_all) LinearLayout ll_all;
        @Bind(R.id.rl_center)RelativeLayout rl_center;
        @Bind(R.id.ll_left)LinearLayout ll_left;
        @Bind(R.id.ll_right)LinearLayout ll_right;
        @Bind(R.id.btn_center1)ImageButton btn_center1;
        @Bind(R.id.btn_left1)Button btn_left1;
        @Bind(R.id.btn_left2)Button btn_left2;
        @Bind(R.id.btn_left3)Button btn_left3;
        @Bind(R.id.btn_right1) Button btn_right1;
        @Bind(R.id.btn_right2) Button btn_right2;
        @Bind(R.id.btn_right3) Button btn_right3;


        //View parameter in constructor enable butterknife to bind
        //to corresponding view
        public ViewHolder(View view){
            ButterKnife.bind(this, view);
        }

        public RelativeLayout getrl_center() {
            return rl_center;
        }

        public LinearLayout getll_all() {
            return ll_all;
        }

        public ImageButton getbtn_center2() {
            return btn_center1;
        }
    }


    //public SwipeAdapter(Context context, int resource, List<String> items) {
    public SwipeAdapter(Context context, int resource, int textview, String[] objects) {
        super(context, resource, textview, objects);
        //this.items = items;
        this.context=context;
        swipedLeft=false;
        swipedRight=false;
        alreadySwiped=false;
    }


    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        final ViewHolder holder;
        //It will have a non-null value when ListView is asking you recycle the row layout.
        //So, when convertView is not null, you should simply update its contents instead of inflating a new row layout.
        if (convertView==null) {
            LayoutInflater inflater =
                    LayoutInflater.from(getContext());
            convertView = inflater.inflate(R.layout.swipe_item, null);



            //save the view within the holder for binding
            holder = new ViewHolder(convertView);

            //save the holder within the view Tag for referencing
            convertView.setTag(holder);



        }
        else {
            //this is used to avoid unneccessary findViewById() calls - saves resources
            holder = (ViewHolder) convertView.getTag();
        }

        //holder.getll_center()


        holder.btn_left2.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                help_press_animation(holder.btn_left2);
                return true;
            }
        });
        holder.btn_right2.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                help_press_animation(holder.btn_right2);

                return true;
            }
        });

        //Create a special listener that spies on all the touchevents generated by
        //the buttons only. Allow a pass through by always returning false.
        //This special listener recognizes when a swipe is being made.
        View.OnTouchListener onTouchListener= new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == 0) {
                    //on touch down
                    action_xinitial = (int) event.getX();
                    action_yinitial = (int) event.getY();
                    alreadySwiped=false;
                }



                else if (event.getAction() == 2 && Math.abs(event.getY()-action_yinitial)>23 && Math.abs(event.getX()-action_xinitial)>23 && !alreadySwiped) {
                    //**********************More testing

                    //on touch up
                    action_xfinal = (int) event.getX();
                    if (action_xfinal > action_xinitial && holder.rl_center.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_left.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_left, true);

                    } else if (action_xfinal < action_xinitial && holder.rl_center.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right, false);

                    }

                    //if Right is visible
                    else if (action_xfinal > action_xinitial && holder.ll_right.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        //holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center, true);//is coming in from left=true

                    } else if (action_xfinal < action_xinitial && holder.ll_right.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;

                        //Do nothing

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right, false);

                    }

                    //if Left is visible
                    else if (action_xfinal > action_xinitial && holder.ll_left.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //Do nothing

                    } else if (action_xfinal < action_xinitial && holder.ll_left.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;


                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center, false);

                    } else {
                        swipedRight = false;
                        swipedLeft = false;

                    }
                    alreadySwiped=true;
                    //***********************************
                }




                else if (event.getAction() == 1 && Math.abs(event.getX()-action_xinitial)>23 && !alreadySwiped) {
                    //on touch up
                    action_xfinal = (int) event.getX();
                    if (action_xfinal > action_xinitial && holder.rl_center.getVisibility()==View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_left.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_left, true);

                    }
                    else if (action_xfinal < action_xinitial && holder.rl_center.getVisibility()==View.VISIBLE) {
                        swipedLeft = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right,false);

                    }

                    //if Right is visible
                    else if (action_xfinal > action_xinitial && holder.ll_right.getVisibility()==View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        //holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center, true);//is coming in from left=true

                    }
                    else if (action_xfinal < action_xinitial && holder.ll_right.getVisibility()==View.VISIBLE) {
                        swipedLeft = true;

                        //Do nothing

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right,false);

                    }

                    //if Left is visible
                    else if (action_xfinal > action_xinitial && holder.ll_left.getVisibility()==View.VISIBLE) {
                        swipedRight = true;

                        //Do nothing

                    }
                    else if (action_xfinal < action_xinitial && holder.ll_left.getVisibility()==View.VISIBLE) {
                        swipedLeft = true;


                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center,false);

                    }
                    else {
                        swipedRight = false;
                        swipedLeft = false;

                    }
                }
                Log.i("touchme", "yinitial=" + event.getY() + ", action=" + event.getAction());

                return false;
            }
        };

                //****************************
        holder.btn_right1.setOnTouchListener(onTouchListener);
        holder.btn_right2.setOnTouchListener(onTouchListener);
        holder.btn_right3.setOnTouchListener(onTouchListener);
        holder.btn_left1.setOnTouchListener(onTouchListener);
        holder.btn_left2.setOnTouchListener(onTouchListener);
        holder.btn_left3.setOnTouchListener(onTouchListener);

//**********************************

        //Create a special listener that recognizes when a swipe is being made on
        //the layout. This listener is different because you need to return true instead of
        // passing through the info...its not a spy.

        holder.getll_all().setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == 0) {
                    //on touch down
                    action_xinitial = (int) event.getX();
                    action_yinitial = (int) event.getY();
                    alreadySwiped=false;
                }
                else if (event.getAction() == 2 && Math.abs(event.getY()-action_yinitial)>23 && Math.abs(event.getX()-action_xinitial)>23 && !alreadySwiped) {
                    //**********************More testing

                    //on touch up
                    action_xfinal = (int) event.getX();
                    if (action_xfinal > action_xinitial && holder.rl_center.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_left.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_left, true);

                    } else if (action_xfinal < action_xinitial && holder.rl_center.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right, false);

                    }

                    //if Right is visible
                    else if (action_xfinal > action_xinitial && holder.ll_right.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        //holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center, true);//is coming in from left=true

                    } else if (action_xfinal < action_xinitial && holder.ll_right.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;

                        //Do nothing

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right, false);

                    }

                    //if Left is visible
                    else if (action_xfinal > action_xinitial && holder.ll_left.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //Do nothing

                    } else if (action_xfinal < action_xinitial && holder.ll_left.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;


                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center, false);

                    } else {
                        swipedRight = false;
                        swipedLeft = false;

                    }
                    alreadySwiped=true;
                    //***********************************
                }






                else if (event.getAction() == 1 && Math.abs(event.getX()-action_xinitial)>23 && !alreadySwiped) {
                    //on touch up
                    action_xfinal = (int) event.getX();
                    if (action_xfinal > action_xinitial && holder.rl_center.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_left.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_left, true);

                    } else if (action_xfinal < action_xinitial && holder.rl_center.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right, false);

                    }

                    //if Right is visible
                    else if (action_xfinal > action_xinitial && holder.ll_right.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        //holder.rl_center.setVisibility(View.GONE);
                        holder.ll_right.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center, true);//is coming in from left=true

                    } else if (action_xfinal < action_xinitial && holder.ll_right.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;

                        //Do nothing

                        //LinearLayout ll_center=(LinearLayout) touchedview.findViewById(R.id.ll_center);
                        holder.rl_center.setVisibility(View.GONE);
                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.ll_right.setVisibility(View.VISIBLE);
                        swipe_animation(holder.ll_right, false);

                    }

                    //if Left is visible
                    else if (action_xfinal > action_xinitial && holder.ll_left.getVisibility() == View.VISIBLE) {
                        swipedRight = true;

                        //Do nothing

                    } else if (action_xfinal < action_xinitial && holder.ll_left.getVisibility() == View.VISIBLE) {
                        swipedLeft = true;


                        holder.ll_left.setVisibility(View.GONE);
                        //LinearLayout ll_right=(LinearLayout) touchedview.findViewById(R.id.ll_right);
                        holder.rl_center.setVisibility(View.VISIBLE);
                        swipe_animation(holder.rl_center, false);

                    } else {
                        swipedRight = false;
                        swipedLeft = false;

                    }
                }
                //Log.i("touchme", "xinitial=" + action_xinitial + ", xfinal=" + action_xfinal);
                Log.i("touchme", "yinitial=" + event.getY() + ", action=" + event.getAction());


                return true;
            }
        });



            return convertView;
    }


    public void help_press_animation(View btn){

        Animation pressanimation= AnimationUtils.loadAnimation(getContext(), R.anim.press_animation);
        btn.startAnimation(pressanimation);
        btn.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);

    }

    public void swipe_animation (View view, Boolean direction){

        Animation swipe=AnimationUtils.makeInAnimation(getContext(), direction);
        view.startAnimation(swipe);

    }



}
